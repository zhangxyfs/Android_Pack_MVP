apply from: "../info/paramsBase.gradle"
apply from: "../info/lib.gradle"

if (SELF_TEST.equals("YES")) {
    apply plugin: pluginAppli
} else {
    apply plugin: pluginLibrary
}
apply plugin: pluginKotlin
apply plugin: pluginKotlinExt
apply plugin: pluginKotlinKapt
apply plugin: pluginObjectBox

android {
    compileSdkVersion Integer.parseInt(sdkVersion)
    buildToolsVersion toolsVersion

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:$jsr305Ver"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        if (SELF_TEST.equals("YES")) {
            applicationId pluginTestAppID
        }
        minSdkVersion Integer.parseInt(minSDKVer)
        targetSdkVersion Integer.parseInt(targetSDKVer)
        versionCode Integer.parseInt(verCode)
        versionName verName
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //排除某个间接依赖
        packagingOptions {
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/license.txt'
        }

        //忽略方法数限制的检查
        dexOptions {
            jumboMode = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(proguard), proguardRule
        }
    }

    lintOptions {
        abortOnError false
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //implementation(name: 'plugin-base', ext: 'aar') 加载aar
    if (SELF_TEST.equals("NO")) {
        compileOnly project(':Base')
    } else {
        implementation project(':Base')
    }

    testImplementation "$junit"
    androidTestImplementation "$testRunner"
    androidTestImplementation "$testEspresso"
}